service: warm-handoff-serverless

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:

##############################
## RECOVERY SPECIALISTS CRUD
##############################
  create_recovery_specialists:
    handler: recovery_specialists/handler.create
    events:
      - http:
          path: recovery_specialists
          method: post
          cors: true

  list_recovery_specialists:
      handler: recovery_specialists/handler.list
      events:
        - http:
            path: recovery_specialists
            method: get
            cors: true
  get_recovery_specialist:
      handler: recovery_specialists/handler.get
      events:
        - http:
            path: recovery_specialists/{id}
            method: get
            cors: true

  delete_recovery_specialist:
      handler: recovery_specialists/handler.delete
      events:
        - http:
            path: recovery_specialists/{id}
            method: delete
            cors: true

#####################
## FACILITIES CRUD
#####################
  create_facility:
    handler: facilities/handler.create
    events:
      - http:
          path: facilities
          method: post
          cors: true
  list_facilities:
      handler: facilities/handler.list
      events:
        - http:
            path: facilities
            method: get
            cors: true
  get_facility:
      handler: facilities/handler.get
      events:
        - http:
            path: facilities/{id}
            method: get
            cors: true

  delete_facility:
      handler: facilities/handler.delete
      events:
        - http:
            path: facilities/{id}
            method: delete
            cors: true

#####################
## JOBS CRUD
#####################

  create_job:
    handler: jobs/handler.create
    events:
      - http:
          path: jobs
          method: post
          cors: true
  list_jobs:
      handler: jobs/handler.list
      events:
        - http:
            path: jobs
            method: get
            cors: true
  get_job:
      handler: jobs/handler.get
      events:
        - http:
            path: jobs/{id}
            method: get
            cors: true
  delete_job:
      handler: jobs/handler.delete
      events:
        - http:
            path: jobs/{id}
            method: delete
            cors: true

resources:
  Resources:
    # Note: The '2' in the table names is because I tore down the app and rebuilt it.  And then when I tried to redeploy,
    # it complained that the tables already exist.  Have yet to sort it out...
    # Seems to be a known issue w/ serverless:  https://github.com/serverless/serverless/issues/3183
    RecoverySpecialistsDynamoDbTable2:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain # means that your data won't be lost if your app is torn down
      Properties:
        AttributeDefinitions: # defines the type of the primary key
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName:
          'recovery_specialists_table_2'

    FacilitiesDynamoDbTable2:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 100
          WriteCapacityUnits: 100
        TableName:
          'facilities_table_2'


    JobsDynamoDbTable2:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 20
          WriteCapacityUnits: 20
        TableName:
          'jobs_table_2'